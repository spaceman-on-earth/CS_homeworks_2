//using System;

namespace CSIntroHomework1
{
    static class Homework1  // internal(доступный только из данной сборки)-статический класс, 
                            // не требующий создания экземпляров, т.к. в этом нет необходимости 
    {
        /* Данная программа работает по принципу простого калькулятора, выполняя простые арифметические операции
           над двумя вещественными числами (что является более общим представлением числовых значений).
           Семантика: "число1->выбор оператора->число2->результат". */

        static void Main()  // точка входа в программу с доступом только для CLR; 
                            // массив для сохранения аргументов командной строки не применяется
        {
            double a = 0, b = 0;    // числа-операнды
            string? operation;      // строка для пользовательского ввода оператора (с контролем на null)   
            
            Console.WriteLine("\nВведите первое число, затем арифметический оператор и второе число.");
            Console.WriteLine("Следует учесть важный момент. Формат записи чисел по умолчанию соответствует системной локали.");
            Console.WriteLine("Т.е. разделителем целой и дро6ной части числа может выступать как '.', так и ',', в зависимости от региональных настроек.");
            Console.WriteLine(" > для сложения используйте '+'");
            Console.WriteLine(" > для вычитания используйте '-'");
            Console.WriteLine(" > для умножения используйте '*'");
            Console.WriteLine(" > для деления используйте '/'");
            Console.WriteLine("Каждый ввод подтверждайте клавишей Enter.\n");

            a = InputValue();

            // Непосредственно сам калькулятор на основе шаблона значений operation в операторе switch:
            while (true)
            {
                operation = Console.ReadLine();
                try
                {
                    // используем проверенный контекст для отслеживания переполнения в результатах 
                    // арифметических операций (в случае переполнения результат не будет ожидаемым)
                    switch (operation)
                    {
                        case "+":   // сложение
                            b = InputValue();
                            var sum = checked(a + b);
                            Console.WriteLine($"\n= {sum:f4}\n");   // интерполированная строка для вывода суммы
                                                                    // с 4 числами после запятой
                            break;
                        case "-":   // вычитание
                            b = InputValue();
                            var diff = checked(a - b);
                            Console.WriteLine($"\n= {diff:f4}\n");
                            break;
                        case "*":   // умножение
                            b = InputValue();
                            var prod = checked(a * b);
                            Console.WriteLine($"\n= {prod:f4}\n");
                            break;
                        case "/":   // деление
                            b = InputValue();
                            var quotient = checked(a / b);
                            var reminder = a % b;
                            Console.WriteLine($"\n= {quotient:f4} (остаток {reminder})\n");
                            break;
                        default:    // недопустимый символ операции
                            Console.WriteLine("Введен недопустимый символ операции. Повторите ввод.\n");
                            continue;
                    }
                    break;
                }
                catch (OverflowException)
                {
                    Console.WriteLine("В ходе операций возникло переполнение. Повторите ввод оператора и второго числа.");
                    continue;
                }
            }
        }

        // Метод для ввода чисел с консоли:
        public static double InputValue()
        {
            string? argument;   // строка для пользовательского ввода числа (с контролем на null)
            double value = 0;   /* локальная переменная для сохранения значения, преобразованного в double
                                   из строки пользовательского ввода; объявляем ее в этой области, чтобы было
                                   допустимо использование управляемого указателя out при выводе из метода
                                   (аргумент value, как цель ссылки, должен иметь время жизни больше,
                                   чем параметр out в методе TryParse) */
            
            while (true)    // защита от переполнения, которое может произойти при вводе числа,
                            // выходящего за пределы диапазона double (без прерывания потока выполнения)
            {
                argument = Console.ReadLine();
                try
                {
                    checked
                    {
                        // перехват исключения и преобразование значения, как одна операция:
                        if (Double.TryParse(argument, out value)) break; // ввод числа верный, преобразование успешно
                        
                        /* В .NET Core 3.0 и более поздних версиях значения, которые слишком большие для представления, 
                           округляются до PositiveInfinity или NegativeInfinity, как это требуется в спецификации IEEE 754.*/
                        
                        else
                        {
                            Console.WriteLine("Введено недопустимое значение. Значение должно быть вещественным числом. Повторите ввод.\n");
                            continue;
                        }
                    }
                }
                catch (OverflowException)
                {
                    Console.WriteLine("Введено слишком большое число для правильного выполнения операций. Повторите ввод.");
                    continue;
                }
            }
            return value;
        }
    }
}

